import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import threading
import time
import psutil
import socket
import subprocess
import os
import sys
from collections import defaultdict, deque
from datetime import datetime
import json

# ‚ö° –í–∫–ª—é—á–∏—Ç–µ —Å—é–¥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π FirewallManager –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
class FirewallManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Windows Firewall - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self):
        self.blocked_apps = set()
        self.rule_prefix = "NetworkAnalyzer_Block_"
        self.language_detected = None
        self.working_rules_command = None
        print(f"üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô FirewallManager - –ø—Ä–µ—Ñ–∏–∫—Å: '{self.rule_prefix}'")
        
        self.detect_system_language()
        self.test_firewall_access()
        
    def detect_system_language(self):
        try:
            result = subprocess.run(['netsh', 'advfirewall', 'show', 'allprofiles'], 
                                  capture_output=True, text=True, timeout=10,
                                  encoding='utf-8', errors='ignore')
            
            if result.returncode == 0:
                output = result.stdout.lower()
                if any(word in output for word in ['–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', '–ø—Ä–æ—Ñ–∏–ª—å', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ']):
                    self.language_detected = 'ru'
                elif any(word in output for word in ['settings', 'profile', 'state']):
                    self.language_detected = 'en'
                else:
                    self.language_detected = 'unknown'
            else:
                self.language_detected = 'unknown'
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
            self.language_detected = 'unknown'
        
        return self.language_detected
    
    def is_admin(self):
        try:
            import ctypes
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            return False
    
    def test_firewall_access(self):
        print("\nüî• === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê === üî•")
        
        commands_to_test = [
            ['netsh', 'advfirewall', 'firewall', 'show', 'rule', 'dir=out'],
            ['netsh', 'advfirewall', 'firewall', 'show', 'rule', 'direction=outbound'],
            ['netsh', 'advfirewall', 'firewall', 'show', 'rule', 'name=all'],
            ['netsh', 'advfirewall', 'firewall', 'show', 'rule'],
            ['netsh', 'firewall', 'show', 'config'],
        ]
        
        working_command = None
        best_score = 0
        
        for i, cmd in enumerate(commands_to_test):
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=15,
                                      encoding='utf-8', errors='ignore')
                
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    rule_count = 0
                    
                    rule_indicators = [
                        'Rule Name:', '–ò–º—è –ø—Ä–∞–≤–∏–ª–∞:', 'Nome da Regra:', 'Nom de la r√®gle:'
                    ]
                    
                    for line in lines[:30]:
                        for indicator in rule_indicators:
                            if indicator in line:
                                rule_count += 1
                                break
                    
                    if rule_count > best_score:
                        best_score = rule_count
                        working_command = cmd
                        
            except Exception:
                continue
        
        self.working_rules_command = working_command
        
        if working_command:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –∫–æ–º–∞–Ω–¥–∞: {' '.join(working_command)}")
        else:
            print("‚ùå –†–∞–±–æ—á–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print("üî• === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò === üî•\n")
        return working_command is not None
    
    def check_firewall_access(self):
        try:
            result = subprocess.run(['netsh', 'advfirewall', 'show', 'allprofiles'], 
                                  capture_output=True, text=True, timeout=5,
                                  encoding='utf-8', errors='ignore')
            return result.returncode == 0
        except:
            return False
    
    def get_app_path(self, pid):
        try:
            proc = psutil.Process(pid)
            return proc.exe()
        except:
            return None
    
    def create_block_rule(self, app_name, app_path):
        if not self.is_admin():
            raise PermissionError("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        if not app_path or not os.path.exists(app_path):
            raise FileNotFoundError(f"–§–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {app_path}")
        
        rule_name = f"{self.rule_prefix}{app_name}"
        
        try:
            commands_to_try = [
                ['netsh', 'advfirewall', 'firewall', 'add', 'rule',
                 f'name={rule_name}', 'dir=out', 'action=block', f'program={app_path}', 'enable=yes'],
                ['netsh', 'advfirewall', 'firewall', 'add', 'rule',
                 f'name={rule_name}', 'direction=outbound', 'action=block', f'program={app_path}', 'enable=yes']
            ]
            
            for cmd in commands_to_try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=15,
                                      encoding='utf-8', errors='ignore')
                
                if result.returncode == 0:
                    self.blocked_apps.add(app_name)
                    return True, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
            
            return False, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def remove_block_rule(self, app_name):
        if not self.is_admin():
            raise PermissionError("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        rule_name = f"{self.rule_prefix}{app_name}"
        
        try:
            commands_to_try = [
                ['netsh', 'advfirewall', 'firewall', 'delete', 'rule', f'name={rule_name}'],
                ['netsh', 'advfirewall', 'firewall', 'delete', 'rule', f'name={rule_name}', 'dir=out']
            ]
            
            for cmd in commands_to_try:
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=15,
                                      encoding='utf-8', errors='ignore')
                
                if result.returncode == 0:
                    self.blocked_apps.discard(app_name)
                    return True, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞"
            
            return False, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def is_app_blocked(self, app_name):
        if app_name in self.blocked_apps:
            return True
        
        blocked_apps = self.get_blocked_apps()
        return app_name in blocked_apps
    
    def get_blocked_apps_with_debug(self):
        blocked = []
        
        if self.working_rules_command:
            cmd = self.working_rules_command
        else:
            emergency_commands = [
                ['netsh', 'advfirewall', 'firewall', 'show', 'rule'],
                ['netsh', 'firewall', 'show', 'config'],
            ]
            
            cmd = None
            for test_cmd in emergency_commands:
                try:
                    result = subprocess.run(test_cmd, capture_output=True, text=True, timeout=15,
                                          encoding='utf-8', errors='ignore')
                    
                    if result.returncode == 0:
                        cmd = test_cmd
                        self.working_rules_command = cmd
                        break
                        
                except Exception:
                    continue
            
            if not cmd:
                return list(self.blocked_apps)
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=25,
                                  encoding='utf-8', errors='ignore')
            
            if result.returncode != 0:
                return list(self.blocked_apps)
            
            lines = result.stdout.split('\n')
            
            rule_indicators = [
                'Rule Name:', 'Rule name:', '–ò–º—è –ø—Ä–∞–≤–∏–ª–∞:', 'Nome da Regra:'
            ]
            
            for line in lines:
                line_clean = line.strip()
                
                for indicator in rule_indicators:
                    if indicator in line_clean:
                        try:
                            parts = line_clean.split(indicator)
                            if len(parts) > 1:
                                rule_name = parts[1].strip()
                                
                                if self.rule_prefix in rule_name:
                                    app_name = rule_name[len(self.rule_prefix):]
                                    if app_name and app_name not in blocked:
                                        blocked.append(app_name)
                        except Exception:
                            pass
                        break
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
            if not blocked:
                for line in lines:
                    if self.rule_prefix in line:
                        parts = line.split(self.rule_prefix)
                        if len(parts) > 1:
                            remaining = parts[1]
                            for delimiter in [' ', '\t', ',', ';', '"', "'", '\n', '\r']:
                                if delimiter in remaining:
                                    app_name = remaining.split(delimiter)[0]
                                    break
                            else:
                                app_name = remaining
                            
                            app_name = app_name.strip('",;\'')
                            
                            if app_name and app_name not in blocked:
                                blocked.append(app_name)
            
            self.blocked_apps = set(blocked)
            return blocked
            
        except Exception:
            return list(self.blocked_apps)
    
    def get_blocked_apps(self):
        return self.get_blocked_apps_with_debug()
    
    def refresh_blocked_status(self):
        self.blocked_apps.clear()
        blocked_apps = self.get_blocked_apps()
        return blocked_apps
    
    def cleanup_rules(self):
        if not self.is_admin():
            return False, "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        try:
            blocked_apps = self.get_blocked_apps()
            removed_count = 0
            
            for app_name in blocked_apps:
                success, _ = self.remove_block_rule(app_name)
                if success:
                    removed_count += 1
            
            return True, f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {removed_count}"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}"
    
    def manual_test_rule_creation(self, test_app_name="TestApp"):
        if not self.is_admin():
            return False
        
        test_path = "C:\\Windows\\System32\\notepad.exe"
        
        try:
            success, message = self.create_block_rule(test_app_name, test_path)
            
            if success:
                blocked_apps = self.get_blocked_apps()
                test_success = test_app_name in blocked_apps
                
                remove_success, _ = self.remove_block_rule(test_app_name)
                return test_success
                
            return False
                
        except Exception:
            return False

class ToolTip:
    def __init__(self, widget, text='–ü–æ–¥—Å–∫–∞–∑–∫–∞'):
        self.widget = widget
        self.text = text
        self.tooltip_window = None
        self.widget.bind("<Enter>", self.on_enter)
        self.widget.bind("<Leave>", self.on_leave)
        
    def on_enter(self, event=None):
        if self.tooltip_window is not None:
            return
        self.show_tooltip(event)
    
    def on_leave(self, event=None):
        self.hide_tooltip()
    
    def show_tooltip(self, event=None):
        x, y, _, _ = self.widget.bbox("insert") if hasattr(self.widget, 'bbox') else (0, 0, 0, 0)
        x += self.widget.winfo_rootx() + 25
        y += self.widget.winfo_rooty() + 25
        
        self.tooltip_window = tk.Toplevel(self.widget)
        self.tooltip_window.wm_overrideredirect(True)
        self.tooltip_window.wm_geometry(f"+{x}+{y}")
        
        frame = tk.Frame(self.tooltip_window, bg='#2b2b2b', relief='solid', bd=1)
        frame.pack()
        
        label = tk.Label(frame, text=self.text, bg='#2b2b2b', fg='white',
                        font=('Arial', 9), justify='left', padx=8, pady=5)
        label.pack()
    
    def hide_tooltip(self):
        if self.tooltip_window is not None:
            self.tooltip_window.destroy()
            self.tooltip_window = None

class NetworkTrafficAnalyzer:
    def __init__(self, root):
        self.root = root
        self.root.title("‚ö° –¢–£–†–ë–û-–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2b2b2b')
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.traffic_data = deque(maxlen=60)
        self.protocol_stats = defaultdict(int)
        self.connection_stats = defaultdict(int)
        self.bandwidth_data = {'sent': deque(maxlen=60), 'received': deque(maxlen=60)}
        self.time_stamps = deque(maxlen=60)
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        self.app_traffic = defaultdict(lambda: {'sent': 0, 'received': 0, 'connections': 0, 'last_activity': None})
        self.app_history = defaultdict(lambda: {'sent': deque(maxlen=30), 'received': deque(maxlen=30)})
        self.previous_io_stats = {}
        
        # ‚ö° –¢–£–†–ë–û: –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
        self.app_total_traffic = defaultdict(lambda: {'sent_mb': 0.0, 'received_mb': 0.0, 'total_mb': 0.0, 'session_start': datetime.now()})
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.monitoring = False
        self.last_stats = None
        self.auto_update_apps = None
        self.freeze_sort = None
        self.last_sort_order = []
        self.apps_update_counter = 0
        self.apps_tree_tooltip = None
        self.console_log = []
        
        # ‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú: –ö—ç—à–∏ –∏ —Ñ–ª–∞–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.ui_update_cache = {}
        self.last_ui_update = 0
        self.tooltip_last_update = 0
        self.tooltip_delay = 0.5
        self.current_tab = 0
        
        # ‚ö° –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ
        self.plot_update_counter = 0
        self.table_update_counter = 0
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä firewall
        self.firewall_manager = FirewallManager()
        self.admin_rights = self.firewall_manager.is_admin()
        self.firewall_available = self.firewall_manager.check_firewall_access()
        
        self.setup_ui()
        self.setup_plots()
        
        # ‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ
        print("‚ö° –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –¢–£–†–ë–û –†–ï–ñ–ò–ú–ï!")
        print("üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —ç–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è'")
        print("‚ñ∂Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
        self.root.after(1000, self.initialize_tables)
        
        self.monitor_thread = None

    def auto_start_monitoring(self):
        """‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            if not self.monitoring:
                print("‚ö° –¢–£–†–ë–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                self.start_monitoring()
                print("‚úÖ –¢–£–†–ë–û –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                self.root.after(2000, self.show_auto_start_notification)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def show_auto_start_notification(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ"""
        try:
            messagebox.showinfo("‚ö° –¢–£–†–ë–û –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫", 
                              "üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
                              "‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú –∞–∫—Ç–∏–≤–µ–Ω\n"
                              "üì± –í–∫–ª–∞–¥–∫–∞ '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –æ—Ç–∫—Ä—ã—Ç–∞\n"
                              "üîç –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞—á–∞—Ç\n\n"
                              "üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '‚èπÔ∏è –°—Ç–æ–ø'")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def switch_to_apps_tab(self):
        """‚ö° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è" (–∏–Ω–¥–µ–∫—Å 3)
            self.notebook.select(3)
            self.current_tab = 3
            print("‚ö° –¢–£–†–ë–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è'")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            if hasattr(self, 'apps_tree'):
                self.refresh_apps()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")

    def on_tab_changed(self, event):
        """‚ö° –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫"""
        try:
            self.current_tab = self.notebook.index(self.notebook.select())
            print(f"‚ö° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É {self.current_tab}")
            
            if self.current_tab == 4:  # Firewall
                self.refresh_firewall_table()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏: {e}")

    def initialize_tables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è UI"""
        try:
            print("‚ö° –¢—É—Ä–±–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü...")
            if hasattr(self, 'firewall_tree'):
                self.refresh_firewall_table()
            if hasattr(self, 'apps_tree'):
                self.refresh_apps()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        
    def setup_ui(self):
        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), background='#2b2b2b', foreground='white')
        style.configure('Info.TLabel', font=('Arial', 10), background='#2b2b2b', foreground='white')
        style.configure('Custom.TButton', font=('Arial', 10, 'bold'))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2b2b2b')
        title_frame.pack(fill='x', padx=10, pady=5)
        
        title_label = ttk.Label(title_frame, text="‚ö° –¢–£–†–ë–û-–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", style='Title.TLabel')
        title_label.pack(side='left')
        ToolTip(title_label, "‚ö° –¢–£–†–ë–û –í–ï–†–°–ò–Ø —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º!\nüöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\nüì± –í–∫–ª–∞–¥–∫–∞ '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É\n‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.start_btn = ttk.Button(title_frame, text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", command=self.start_monitoring, style='Custom.TButton')
        self.start_btn.pack(side='right', padx=(0, 5))
        
        self.stop_btn = ttk.Button(title_frame, text="‚èπÔ∏è –°—Ç–æ–ø", command=self.stop_monitoring, style='Custom.TButton', state='disabled')
        self.stop_btn.pack(side='right', padx=(0, 5))
        
        self.save_btn = ttk.Button(title_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_report, style='Custom.TButton')
        self.save_btn.pack(side='right', padx=(0, 5))
        
        # ‚ö° –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.reset_btn = ttk.Button(title_frame, text="üîÑ –°–±—Ä–æ—Å", command=self.reset_traffic_stats, style='Custom.TButton')
        self.reset_btn.pack(side='right', padx=(0, 5))
        ToolTip(self.reset_btn, "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞\n–≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–æ –Ω—É–ª—è")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = tk.Frame(self.root, bg='#363636', relief='raised', bd=1)
        info_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_row1 = tk.Frame(info_frame, bg='#363636')
        info_row1.pack(fill='x', padx=5, pady=2)
        
        self.status_label = ttk.Label(info_row1, text="–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style='Info.TLabel')
        self.status_label.pack(side='left', padx=10, pady=3)
        
        self.connections_label = ttk.Label(info_row1, text="–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: 0", style='Info.TLabel')
        self.connections_label.pack(side='left', padx=10, pady=3)
        
        self.bandwidth_label = ttk.Label(info_row1, text="–°–∫–æ—Ä–æ—Å—Ç—å: 0 KB/s", style='Info.TLabel')
        self.bandwidth_label.pack(side='left', padx=10, pady=3)
        
        # ‚ö° –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–∞
        self.perf_label = ttk.Label(info_row1, text="‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù", style='Info.TLabel')
        self.perf_label.pack(side='right', padx=10, pady=3)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        info_row2 = tk.Frame(info_frame, bg='#363636')
        info_row2.pack(fill='x', padx=5, pady=2)
        
        # ‚ö° –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–§–ò–ö–ê
        self.total_traffic_label = ttk.Label(info_row2, text="üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: ‚Üë0.00 MB ‚Üì0.00 MB (–í—Å–µ–≥–æ: 0.00 MB)", style='Info.TLabel')
        self.total_traffic_label.pack(side='left', padx=10, pady=3)
        
        self.apps_count_label = ttk.Label(info_row2, text="üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: 0", style='Info.TLabel')
        self.apps_count_label.pack(side='right', padx=10, pady=3)
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.admin_rights:
            admin_warning = ttk.Label(info_frame, text="‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞", style='Info.TLabel')
            admin_warning.pack(side='right', padx=10, pady=5)
        elif not self.firewall_available:
            firewall_warning = ttk.Label(info_frame, text="‚ö†Ô∏è Firewall –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", style='Info.TLabel')
            firewall_warning.pack(side='right', padx=10, pady=5)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.main_frame = tk.Frame(self.root, bg='#2b2b2b')
        self.main_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill='both', expand=True)
        
        # ‚ö° –ü—Ä–∏–≤—è–∑–∫–∞ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–æ–∫
        self.notebook.bind("<<NotebookTabChanged>>", self.on_tab_changed)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.traffic_frame = tk.Frame(self.notebook, bg='#2b2b2b')
        self.notebook.add(self.traffic_frame, text="‚ö° –¢—Ä–∞—Ñ–∏–∫ (–¢—É—Ä–±–æ)")
        
        self.protocol_frame = tk.Frame(self.notebook, bg='#2b2b2b')
        self.notebook.add(self.protocol_frame, text="‚ö° –ü—Ä–æ—Ç–æ–∫–æ–ª—ã")
        
        self.connections_frame = tk.Frame(self.notebook, bg='#2b2b2b')
        self.notebook.add(self.connections_frame, text="‚ö° –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        
        self.apps_frame = tk.Frame(self.notebook, bg='#2b2b2b')
        self.notebook.add(self.apps_frame, text="‚ö° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫)")
        
        self.firewall_frame = tk.Frame(self.notebook, bg='#2b2b2b')
        self.notebook.add(self.firewall_frame, text="‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
        
        # ‚ö° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê –í–ö–õ–ê–î–ö–£ "–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø" –ü–†–ò –ó–ê–ü–£–°–ö–ï
        self.root.after(750, self.switch_to_apps_tab)
        
        # ‚ö° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–ò –°–¢–ê–†–¢–ï
        self.root.after(2000, self.auto_start_monitoring)

    def setup_plots(self):
        # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        self.fig_traffic, self.ax_bandwidth = plt.subplots(1, 1, figsize=(10, 6), facecolor='#2b2b2b')
        self.fig_traffic.patch.set_facecolor('#2b2b2b')
        
        self.ax_bandwidth.set_facecolor('#363636')
        self.ax_bandwidth.set_title('‚ö° –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (–¢–£–†–ë–û)', color='white', fontsize=12, fontweight='bold')
        self.ax_bandwidth.set_xlabel('–í—Ä–µ–º—è', color='white')
        self.ax_bandwidth.set_ylabel('KB/s', color='white')
        self.ax_bandwidth.tick_params(colors='white')
        
        plt.tight_layout()
        
        self.canvas_traffic = FigureCanvasTkAgg(self.fig_traffic, self.traffic_frame)
        self.canvas_traffic.get_tk_widget().pack(fill='both', expand=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        self.fig_protocol, self.ax_protocol = plt.subplots(figsize=(8, 6), facecolor='#2b2b2b')
        self.fig_protocol.patch.set_facecolor('#2b2b2b')
        self.ax_protocol.set_facecolor('#363636')
        self.ax_protocol.set_title('‚ö° –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ (–¢–£–†–ë–û)', color='white', fontsize=12, fontweight='bold')
        
        self.canvas_protocol = FigureCanvasTkAgg(self.fig_protocol, self.protocol_frame)
        self.canvas_protocol.get_tk_widget().pack(fill='both', expand=True)
        
        # –¢–∞–±–ª–∏—Ü—ã
        self.setup_connections_table()
        self.setup_apps_table()
        self.setup_firewall_table()
        
    def setup_connections_table(self):
        columns = ('Local Address', 'Remote Address', 'Status', 'PID', 'Process')
        self.connections_tree = ttk.Treeview(self.connections_frame, columns=columns, show='headings', height=20)
        
        for col in columns:
            self.connections_tree.heading(col, text=col)
            self.connections_tree.column(col, width=150)
        
        scrollbar = ttk.Scrollbar(self.connections_frame, orient='vertical', command=self.connections_tree.yview)
        self.connections_tree.configure(yscrollcommand=scrollbar.set)
        
        self.connections_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
    def setup_apps_table(self):
        """‚ö° –¢–£–†–ë–û –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        control_frame = tk.Frame(self.apps_frame, bg='#2b2b2b')
        control_frame.pack(fill='x', padx=5, pady=5)
        
        apps_title = ttk.Label(control_frame, text="‚ö° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¢–£–†–ë–û –†–ï–ñ–ò–ú)", style='Title.TLabel')
        apps_title.pack(side='left')
        ToolTip(apps_title, "üì± –≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\n‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n‚ö° –í —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ 15 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\nüìä –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ú–ë\nüîÑ –ö–Ω–æ–ø–∫–∞ '–°–±—Ä–æ—Å' –æ–±–Ω—É–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏")
        
        right_controls = tk.Frame(control_frame, bg='#2b2b2b')
        right_controls.pack(side='right')
        
        self.auto_update_apps = tk.BooleanVar(value=True)
        auto_update_check = ttk.Checkbutton(right_controls, text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                                          variable=self.auto_update_apps)
        auto_update_check.pack(side='left', padx=(0, 10))
        
        refresh_btn = ttk.Button(right_controls, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_apps, style='Custom.TButton')
        refresh_btn.pack(side='left', padx=(0, 5))
        
        self.freeze_sort = tk.BooleanVar(value=False)
        freeze_btn = ttk.Checkbutton(right_controls, text="–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫", 
                                   variable=self.freeze_sort)
        freeze_btn.pack(side='left', padx=(5, 0))
        
        apps_columns = ('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'PID', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (MB)', '–ü–æ–ª—É—á–µ–Ω–æ (MB)', '–í—Å–µ–≥–æ (MB)', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
        self.apps_tree = ttk.Treeview(self.apps_frame, columns=apps_columns, show='headings', height=15)
        
        column_widths = {
            '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': 180, 
            'PID': 70, 
            '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (MB)': 110, 
            '–ü–æ–ª—É—á–µ–Ω–æ (MB)': 110, 
            '–í—Å–µ–≥–æ (MB)': 90,
            '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π': 90, 
            '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 140
        }
        
        for col in apps_columns:
            self.apps_tree.heading(col, text=col)
            self.apps_tree.column(col, width=column_widths.get(col, 100))
        
        apps_scrollbar_v = ttk.Scrollbar(self.apps_frame, orient='vertical', command=self.apps_tree.yview)
        self.apps_tree.configure(yscrollcommand=apps_scrollbar_v.set)
        
        self.apps_tree.pack(side='left', fill='both', expand=True)
        apps_scrollbar_v.pack(side='right', fill='y')
        
        self.setup_context_menu()
        
        self.apps_tree.bind("<Double-1>", self.on_app_double_click)
        self.apps_tree.bind("<Button-3>", self.show_context_menu)
        self.apps_tree.bind("<Motion>", self.on_apps_tree_motion_turbo)
        self.apps_tree.bind("<Leave>", self.on_apps_tree_leave)
        
        self.apps_tree_tooltip = None

    def setup_firewall_table(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è firewall"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(self.firewall_frame, bg='#2b2b2b')
        header_frame.pack(fill='x', padx=10, pady=5)
        
        title_label = ttk.Label(header_frame, text="‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (–¢–£–†–ë–û)", style='Title.TLabel')
        title_label.pack(side='left')
        
        status_frame = tk.Frame(header_frame, bg='#2b2b2b')
        status_frame.pack(side='right')
        
        admin_status = "‚úÖ –ê–¥–º–∏–Ω" if self.admin_rights else "‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞"
        firewall_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if self.firewall_available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        admin_label = ttk.Label(status_frame, text=admin_status, style='Info.TLabel')
        admin_label.pack(side='top')
        
        firewall_label = ttk.Label(status_frame, text=f"Firewall: {firewall_status}", style='Info.TLabel')
        firewall_label.pack(side='top')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_frame = tk.Frame(self.firewall_frame, bg='#2b2b2b')
        controls_frame.pack(fill='x', padx=10, pady=5)
        
        refresh_firewall_btn = ttk.Button(controls_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                                        command=self.refresh_firewall_table, style='Custom.TButton')
        refresh_firewall_btn.pack(side='left', padx=(0, 5))
        
        cleanup_btn = ttk.Button(controls_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", 
                               command=self.cleanup_firewall_rules, style='Custom.TButton')
        cleanup_btn.pack(side='left', padx=(0, 5))
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        debug_controls_frame = tk.Frame(self.firewall_frame, bg='#2b2b2b')
        debug_controls_frame.pack(fill='x', padx=10, pady=5)
        
        test_firewall_btn = ttk.Button(debug_controls_frame, text="üîß –¢–µ—Å—Ç Firewall", 
                                     command=self.test_firewall_functionality, style='Custom.TButton')
        test_firewall_btn.pack(side='left', padx=(0, 5))
        
        debug_btn = ttk.Button(debug_controls_frame, text="üêõ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", 
                             command=self.run_firewall_diagnostics, style='Custom.TButton')
        debug_btn.pack(side='left', padx=(0, 5))
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        firewall_columns = ('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ', '–î–µ–π—Å—Ç–≤–∏—è')
        self.firewall_tree = ttk.Treeview(self.firewall_frame, columns=firewall_columns, show='headings', height=12)
        
        column_widths = {'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': 300, '–°—Ç–∞—Ç—É—Å': 150, '–ü—Ä–∞–≤–∏–ª–æ —Å–æ–∑–¥–∞–Ω–æ': 200, '–î–µ–π—Å—Ç–≤–∏—è': 150}
        for col in firewall_columns:
            self.firewall_tree.heading(col, text=col)
            self.firewall_tree.column(col, width=column_widths.get(col, 100))
        
        firewall_scrollbar_v = ttk.Scrollbar(self.firewall_frame, orient='vertical', command=self.firewall_tree.yview)
        self.firewall_tree.configure(yscrollcommand=firewall_scrollbar_v.set)
        
        self.firewall_tree.pack(side='left', fill='both', expand=True, padx=10, pady=5)
        firewall_scrollbar_v.pack(side='right', fill='y', pady=5)
        
        self.firewall_tree.bind("<Double-1>", self.on_firewall_double_click)
        self.firewall_tree.bind("<Button-3>", self.show_firewall_context_menu)
        
        self.setup_firewall_context_menu()
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        status_info_frame = tk.Frame(self.firewall_frame, bg='#363636', relief='raised', bd=1)
        status_info_frame.pack(fill='x', padx=10, pady=5)
        
        self.firewall_status_label = ttk.Label(status_info_frame, 
                                             text="‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é", 
                                             style='Info.TLabel')
        self.firewall_status_label.pack(padx=10, pady=5)

    def setup_context_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        self.context_menu = tk.Menu(self.root, tearoff=0, bg='#3c3c3c', fg='white', 
                                   activebackground='#5c5c5c', activeforeground='white',
                                   font=('Arial', 9))
        self.context_menu.add_command(label="üìä –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", command=self.show_app_details)
        self.context_menu.add_command(label="üåç –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", command=self.show_app_connections)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", command=self.block_app_internet)
        self.context_menu.add_command(label="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", command=self.unblock_app_internet)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", command=self.terminate_process)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", command=self.copy_app_info)

    def setup_firewall_context_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã firewall"""
        self.firewall_context_menu = tk.Menu(self.root, tearoff=0, bg='#3c3c3c', fg='white', 
                                           activebackground='#5c5c5c', activeforeground='white',
                                           font=('Arial', 9))
        self.firewall_context_menu.add_command(label="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", command=self.unblock_selected_firewall_app)
        self.firewall_context_menu.add_command(label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.refresh_firewall_table)
        self.firewall_context_menu.add_separator()
        self.firewall_context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", command=self.copy_firewall_app_name)

    def on_apps_tree_motion_turbo(self, event):
        """‚ö° –¢–£–†–ë–û –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        current_time = time.time()
        
        if current_time - self.tooltip_last_update < self.tooltip_delay:
            return
        
        self.show_simple_tooltip(event)
        self.tooltip_last_update = current_time

    def show_simple_tooltip(self, event):
        """‚ö° –¢–£–†–ë–û tooltip –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            item = self.apps_tree.identify_row(event.y)
            
            if item:
                values = self.apps_tree.item(item, 'values')
                if values and len(values) >= 7:
                    app_name = values[0]
                    pid = values[1]
                    total_mb = values[4]
                    connections = values[5]
                    
                    clean_app_name = app_name[3:] if app_name.startswith("üö´ ") else app_name[3:] if app_name.startswith("‚ö° ") else app_name
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ tooltip
                    total_data = self.app_total_traffic.get(clean_app_name, {})
                    sent_mb = total_data.get('sent_mb', 0)
                    recv_mb = total_data.get('received_mb', 0)
                    
                    tooltip_text = f"""‚ö° –¢–£–†–ë–û: {clean_app_name}
PID: {pid} | –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {connections}
‚Üë{sent_mb:.1f}MB ‚Üì{recv_mb:.1f}MB | –í—Å–µ–≥–æ: {total_mb}MB
–ü–ö–ú –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"""
                    
                    self.show_apps_tree_tooltip(event, tooltip_text)
                else:
                    self.hide_apps_tree_tooltip()
            else:
                self.hide_apps_tree_tooltip()
                
        except Exception:
            self.hide_apps_tree_tooltip()

    # ========== –ú–ï–¢–û–î–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ==========

    def get_network_stats(self):
        """‚ö° –¢–£–†–ë–û –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏"""
        try:
            net_io = psutil.net_io_counters()
            # –í —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            connections = psutil.net_connections(kind='inet')[:50]
            
            process_stats = {}
            # –í —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            process_list = list(psutil.process_iter(['pid', 'name']))[:30]
                
            for proc in process_list:
                try:
                    process_stats[proc.info['pid']] = proc.info['name']
                except:
                    continue
                    
            return {
                'net_io': net_io,
                'connections': connections,
                'process_stats': process_stats,
                'timestamp': datetime.now()
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

    def get_process_network_activity(self):
        """‚ö° –¢–£–†–ë–û –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        active_apps = {}
        current_time = datetime.now()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
            net_io = psutil.net_io_counters()
            
            connections = psutil.net_connections(kind='inet')
            process_connections = defaultdict(list)
            
            # –í —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            max_connections = 100
            
            for conn in connections[:max_connections]:
                if conn.pid:
                    process_connections[conn.pid].append(conn)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
            total_net_sent_diff = 0
            total_net_recv_diff = 0
            
            if hasattr(self, 'last_net_io'):
                total_net_sent_diff = max(0, net_io.bytes_sent - self.last_net_io.bytes_sent)
                total_net_recv_diff = max(0, net_io.bytes_recv - self.last_net_io.bytes_recv)
            
            self.last_net_io = net_io
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            total_active_connections = 0
            active_process_connections = {}
            
            for pid, conns in process_connections.items():
                try:
                    proc = psutil.Process(pid)
                    proc_name = proc.name()
                    
                    internet_conns = []
                    for conn in conns:
                        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                        is_internet = False
                        
                        if conn.raddr:  # –ï—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
                            remote_ip = conn.raddr.ip
                            
                            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                            if not (remote_ip.startswith('127.') or 
                                   remote_ip.startswith('0.') or
                                   remote_ip == '::1' or
                                   remote_ip.startswith('fe80:')):
                                
                                # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –Ω–µ —Ç–æ–ª—å–∫–æ ESTABLISHED
                                if conn.status in ['ESTABLISHED', 'SYN_SENT', 'SYN_RECV', 'CLOSE_WAIT', 'TIME_WAIT']:
                                    is_internet = True
                                    
                                # –î–ª—è Download Manager'–æ–≤ —É—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–∂–µ LISTEN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –≤–Ω–µ—à–Ω–∏—Ö IP
                                elif (conn.status == 'LISTEN' and 
                                      proc_name.lower() in ['idman.exe', 'fdm.exe', 'eagleget.exe', 'jdownloader.exe']):
                                    is_internet = True
                        
                        # –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                        elif (conn.laddr and conn.status in ['SYN_SENT', 'ESTABLISHED'] and
                              not conn.laddr.ip.startswith('127.')):
                            is_internet = True
                            
                        if is_internet:
                            internet_conns.append(conn)
                    
                    if internet_conns:
                        active_process_connections[pid] = {
                            'name': proc_name,
                            'connections': len(internet_conns)
                        }
                        total_active_connections += len(internet_conns)
                        
                        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                        if proc_name.lower() in ['idman.exe', 'fdm.exe', 'chrome.exe', 'firefox.exe']:
                            print(f"üîó {proc_name}: –Ω–∞–π–¥–µ–Ω–æ {len(internet_conns)} –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
                            for i, conn in enumerate(internet_conns[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                remote = f"{conn.raddr.ip}:{conn.raddr.port}" if conn.raddr else "N/A"
                                print(f"  ‚îî‚îÄ {i+1}. {conn.status} -> {remote}")
                        
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            total_raw_weight = 0
            app_weights = {}
            high_traffic_apps = []
            
            # –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            for pid, proc_info in active_process_connections.items():
                proc_name = proc_info['name']
                connection_count = proc_info['connections']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                app_type = "normal"
                base_priority = 1.0
                
                if proc_name.lower() in ['idman.exe', 'fdm.exe', 'eagleget.exe', 'jdownloader.exe', 'xdm.exe']:
                    app_type = "download_manager"
                    base_priority = 50.0  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                elif proc_name.lower() in ['torrent', 'utorrent.exe', 'bittorrent.exe', 'qbittorrent.exe']:
                    app_type = "torrent"
                    base_priority = 30.0
                elif proc_name.lower() in ['steam.exe', 'epicgameslauncher.exe', 'battle.net.exe']:
                    app_type = "game_launcher"
                    base_priority = 20.0
                elif proc_name.lower() in ['chrome.exe', 'firefox.exe', 'edge.exe', 'opera.exe', 'msedge.exe']:
                    app_type = "browser"
                    base_priority = 8.0
                elif proc_name.lower() in ['vlc.exe', 'potplayer.exe', 'kmplayer.exe']:
                    app_type = "video_player"
                    base_priority = 15.0
                elif proc_name.lower() in ['discord.exe', 'telegram.exe', 'skype.exe', 'zoom.exe']:
                    app_type = "messenger"
                    base_priority = 2.0
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                activity_score = connection_count * base_priority
                
                # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Download Manager'–æ–≤
                if app_type == "download_manager" and connection_count >= 2:
                    # –ï—Å–ª–∏ Download Manager –∞–∫—Ç–∏–≤–µ–Ω (2+ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è), –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç 80-90% —Ç—Ä–∞—Ñ–∏–∫–∞
                    activity_score = connection_count * 1000  # –û–≥—Ä–æ–º–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    high_traffic_apps.append((proc_name, pid, activity_score))
                    print(f"üö® –ê–ö–¢–ò–í–ù–´–ô DOWNLOAD MANAGER: {proc_name} —Å {connection_count} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏!")
                
                elif app_type == "torrent" and connection_count >= 3:
                    # –¢–æ—Ä—Ä–µ–Ω—Ç—ã —Å –º–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Ç–æ–∂–µ –ø–æ–ª—É—á–∞—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    activity_score = connection_count * 500
                    high_traffic_apps.append((proc_name, pid, activity_score))
                    print(f"üö® –ê–ö–¢–ò–í–ù–´–ô –¢–û–†–†–ï–ù–¢: {proc_name} —Å {connection_count} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏!")
                
                elif app_type == "browser" and connection_count >= 5:
                    # –ë—Ä–∞—É–∑–µ—Ä—ã —Å –º–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—Å—Ç—Ä–∏–º–∏–Ω–≥ –≤–∏–¥–µ–æ)
                    activity_score = connection_count * 100
                    high_traffic_apps.append((proc_name, pid, activity_score))
                    print(f"üåê –ê–ö–¢–ò–í–ù–´–ô –ë–†–ê–£–ó–ï–†: {proc_name} —Å {connection_count} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏!")
                
                app_weights[pid] = {
                    'name': proc_name,
                    'connections': connection_count,
                    'activity_score': activity_score,
                    'app_type': app_type
                }
                total_raw_weight += activity_score
            
            # –≠–¢–ê–ü 2: –û—Å–æ–±–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã—Å–æ–∫–æ-–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if high_traffic_apps and (total_net_sent_diff > 1024 or total_net_recv_diff > 1024):
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
                high_traffic_apps.sort(key=lambda x: x[2], reverse=True)
                most_active_app = high_traffic_apps[0]
                
                print(f"üéØ –û–°–ù–û–í–ù–û–ô –ü–û–¢–†–ï–ë–ò–¢–ï–õ–¨ –¢–†–ê–§–ò–ö–ê: {most_active_app[0]}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                main_app_info = app_weights[most_active_app[1]]
                
                if main_app_info['app_type'] == "download_manager":
                    # Download Manager'—ã –ø–æ–ª—É—á–∞—é—Ç 95% —Ç—Ä–∞—Ñ–∏–∫–∞!
                    main_app_share = 0.95
                    remaining_share = 0.05
                    print(f"üö® DOWNLOAD MANAGER –ø–æ–ª—É—á–∞–µ—Ç 95% —Ç—Ä–∞—Ñ–∏–∫–∞!")
                elif main_app_info['app_type'] == "torrent":
                    # –¢–æ—Ä—Ä–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç 90%
                    main_app_share = 0.90
                    remaining_share = 0.10
                elif main_app_info['app_type'] == "game_launcher":
                    # –ò–≥—Ä–æ–≤—ã–µ –ª–∞—É–Ω—á–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç 85%
                    main_app_share = 0.85
                    remaining_share = 0.15
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç 80%
                    main_app_share = 0.80
                    remaining_share = 0.20
                
                distributed_traffic = {}
                
                # –î–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–æ–ª—é —Å–∞–º–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
                main_pid = most_active_app[1]
                distributed_traffic[main_pid] = main_app_share
                
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—É—á–∞—é—Ç –∫—Ä–æ—Ö–∏
                other_apps = [pid for pid in app_weights.keys() if pid != main_pid]
                if other_apps and remaining_share > 0:
                    # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –¥–æ–ª—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                    crumb_per_app = remaining_share / len(other_apps)
                    for pid in other_apps:
                        distributed_traffic[pid] = crumb_per_app
                
            else:
                # –≠–¢–ê–ü 3: –û–±—ã—á–Ω–æ–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                distributed_traffic = {}
                if total_raw_weight > 0:
                    for pid, weight_info in app_weights.items():
                        exact_proportion = weight_info['activity_score'] / total_raw_weight
                        distributed_traffic[pid] = exact_proportion
            
            # –≠–¢–ê–ü 4: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
            for pid, proportion in distributed_traffic.items():
                weight_info = app_weights[pid]
                proc_name = weight_info['name']
                connection_count = weight_info['connections']
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ –ø–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                sent_bytes = total_net_sent_diff * proportion
                recv_bytes = total_net_recv_diff * proportion
                
                sent_kb = sent_bytes / 1024
                recv_kb = recv_bytes / 1024
                
                # ‚ö° –ù–ê–ö–ê–ü–õ–ò–í–ê–ï–ú –î–ê–ù–ù–´–ï –í –ú–ï–ì–ê–ë–ê–ô–¢–ê–•
                sent_mb = sent_kb / 1024
                recv_mb = recv_kb / 1024
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–∞–º
                self.app_total_traffic[proc_name]['sent_mb'] += sent_mb
                self.app_total_traffic[proc_name]['received_mb'] += recv_mb
                self.app_total_traffic[proc_name]['total_mb'] = (
                    self.app_total_traffic[proc_name]['sent_mb'] + 
                    self.app_total_traffic[proc_name]['received_mb']
                )
                
                self.app_traffic[proc_name]['sent'] = sent_kb
                self.app_traffic[proc_name]['received'] = recv_kb
                self.app_traffic[proc_name]['connections'] = connection_count
                self.app_traffic[proc_name]['last_activity'] = current_time
                self.app_traffic[proc_name]['pid'] = pid
                
                active_apps[proc_name] = {
                    'pid': pid,
                    'connections': connection_count,
                    'last_activity': current_time,
                    'sent': sent_kb,
                    'received': recv_kb,
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ MB
                    'total_sent_mb': self.app_total_traffic[proc_name]['sent_mb'],
                    'total_received_mb': self.app_total_traffic[proc_name]['received_mb'],
                    'total_mb': self.app_total_traffic[proc_name]['total_mb']
                }
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
                if recv_mb > 0.1 or sent_mb > 0.1:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 0.1 MB
                    print(f"‚ö° {proc_name}: +{recv_mb:.2f}MB –ø–æ–ª—É—á–µ–Ω–æ, +{sent_mb:.2f}MB –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ "
                          f"({proportion*100:.1f}% —Ç—Ä–∞—Ñ–∏–∫–∞, {connection_count} —Å–æ–µ–¥.)")
            
            # –≠–¢–ê–ü 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º—ã —Å—Ö–æ–¥—è—Ç—Å—è
            if total_net_sent_diff > 1024 or total_net_recv_diff > 1024:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
                distributed_sent = sum(data.get('sent', 0) for data in active_apps.values()) / 1024  # MB
                distributed_recv = sum(data.get('received', 0) for data in active_apps.values()) / 1024  # MB
                
                system_sent_mb = total_net_sent_diff / 1024 / 1024
                system_recv_mb = total_net_recv_diff / 1024 / 1024
                
                print(f"üìä –ü–†–û–í–ï–†–ö–ê: –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫: ‚Üë{system_sent_mb:.2f}MB ‚Üì{system_recv_mb:.2f}MB")
                print(f"üìä –ü–†–û–í–ï–†–ö–ê: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π: ‚Üë{distributed_sent:.2f}MB ‚Üì{distributed_recv:.2f}MB")
                if high_traffic_apps:
                    main_app = high_traffic_apps[0][0]
                    main_recv = active_apps.get(main_app, {}).get('received', 0) / 1024
                    print(f"üéØ –û–°–ù–û–í–ù–û–ô: {main_app} –ø–æ–ª—É—á–∏–ª {main_recv:.2f}MB ({main_recv/max(system_recv_mb, 0.001)*100:.1f}%)")
            
            return active_apps
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")
            return {}

    def calculate_bandwidth(self, current_stats):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        if self.last_stats is None:
            self.last_stats = current_stats
            return 0, 0
            
        time_diff = (current_stats['timestamp'] - self.last_stats['timestamp']).total_seconds()
        if time_diff <= 0:
            return 0, 0
            
        bytes_sent_diff = current_stats['net_io'].bytes_sent - self.last_stats['net_io'].bytes_sent
        bytes_recv_diff = current_stats['net_io'].bytes_recv - self.last_stats['net_io'].bytes_recv
        
        sent_rate = (bytes_sent_diff / time_diff) / 1024
        recv_rate = (bytes_recv_diff / time_diff) / 1024
        
        self.last_stats = current_stats
        return sent_rate, recv_rate

    def update_data(self):
        """‚ö° –¢–£–†–ë–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring:
            stats = self.get_network_stats()
            if stats:
                sent_rate, recv_rate = self.calculate_bandwidth(stats)
                
                current_time = datetime.now().strftime('%H:%M:%S')
                self.time_stamps.append(current_time)
                self.bandwidth_data['sent'].append(sent_rate)
                self.bandwidth_data['received'].append(recv_rate)
                
                active_connections = len([c for c in stats['connections'] if c.status == 'ESTABLISHED'])
                
                for conn in stats['connections']:
                    if conn.type == socket.SOCK_STREAM:
                        self.protocol_stats['TCP'] += 1
                    elif conn.type == socket.SOCK_DGRAM:
                        self.protocol_stats['UDP'] += 1
                
                active_apps = self.get_process_network_activity()
                
                self.root.after(0, self.update_ui_turbo, stats, sent_rate, recv_rate, active_connections, active_apps)
                
            # –í —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—ã –±–æ–ª—å—à–µ
            time.sleep(3)

    def update_ui_turbo(self, stats, sent_rate, recv_rate, active_connections, active_apps):
        """‚ö° –¢–£–†–ë–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        current_time = time.time()
        
        # –í —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–µ
        min_update_interval = 3
        if current_time - self.last_ui_update < min_update_interval:
            return
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if hasattr(self, 'status_label'):
            status_text = f"–°—Ç–∞—Ç—É—Å: {'‚ö°–¢–£–†–ë–û –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' if self.monitoring else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
            self.status_label.config(text=status_text)
        if hasattr(self, 'connections_label'):
            self.connections_label.config(text=f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {active_connections}")
        if hasattr(self, 'bandwidth_label'):
            self.bandwidth_label.config(text=f"‚Üë{sent_rate:.1f} KB/s ‚Üì{recv_rate:.1f} KB/s")
        
        # ‚ö° –í–´–ß–ò–°–õ–Ø–ï–ú –û–ë–©–£–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–£ –¢–†–ê–§–ò–ö–ê
        total_sent_mb = 0.0
        total_received_mb = 0.0
        total_apps_count = 0
        
        # –°—É–º–º–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        for app_name, traffic_data in self.app_total_traffic.items():
            total_sent_mb += traffic_data.get('sent_mb', 0)
            total_received_mb += traffic_data.get('received_mb', 0)
            total_apps_count += 1
        
        total_mb = total_sent_mb + total_received_mb
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if hasattr(self, 'total_traffic_label'):
            self.total_traffic_label.config(
                text=f"üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: ‚Üë{total_sent_mb:.2f} MB ‚Üì{total_received_mb:.2f} MB (–í—Å–µ–≥–æ: {total_mb:.2f} MB)"
            )
        
        if hasattr(self, 'apps_count_label'):
            active_now = len([app for app in active_apps if active_apps[app]['connections'] > 0])
            self.apps_count_label.config(text=f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_now}/{total_apps_count}")
        
        # ‚ö° –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ
        if self.current_tab == 0:  # –¢—Ä–∞—Ñ–∏–∫
            self.plot_update_counter += 1
            if self.plot_update_counter >= 4:
                self.update_traffic_plot()
                self.plot_update_counter = 0
                
        elif self.current_tab == 1:  # –ü—Ä–æ—Ç–æ–∫–æ–ª—ã
            self.update_protocol_plot()
            
        elif self.current_tab == 2:  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.table_update_counter += 1
            if self.table_update_counter >= 6:
                self.update_connections_table(stats)
                self.table_update_counter = 0
        
        elif self.current_tab == 3:  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if hasattr(self, 'auto_update_apps') and self.auto_update_apps and self.auto_update_apps.get():
                self.apps_update_counter += 1
                if self.apps_update_counter >= 8:
                    self.update_apps_table(active_apps)
                    self.apps_update_counter = 0
        
        self.last_ui_update = current_time

    def update_traffic_plot(self):
        """‚ö° –¢–£–†–ë–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        if not hasattr(self, 'ax_bandwidth') or not hasattr(self, 'canvas_traffic'):
            return
            
        if len(self.bandwidth_data['sent']) > 1:
            self.ax_bandwidth.clear()
            self.ax_bandwidth.set_facecolor('#363636')
            
            self.ax_bandwidth.plot(range(len(self.bandwidth_data['sent'])), self.bandwidth_data['sent'], 
                                 'r-', label='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', linewidth=1)
            self.ax_bandwidth.plot(range(len(self.bandwidth_data['received'])), self.bandwidth_data['received'], 
                                 'b-', label='–ü–æ–ª—É—á–µ–Ω–æ', linewidth=1)
            self.ax_bandwidth.set_title('‚ö° –¢–£–†–ë–û: –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', color='white', fontweight='bold')
            
            self.ax_bandwidth.set_ylabel('KB/s', color='white')
            self.ax_bandwidth.tick_params(colors='white')
            self.ax_bandwidth.legend()
            
            self.canvas_traffic.draw()

    def update_protocol_plot(self):
        """‚ö° –¢–£–†–ë–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
        if not hasattr(self, 'ax_protocol') or not hasattr(self, 'canvas_protocol'):
            return
            
        if self.protocol_stats:
            self.ax_protocol.clear()
            self.ax_protocol.set_facecolor('#363636')
            
            protocols = list(self.protocol_stats.keys())
            values = list(self.protocol_stats.values())
            colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7']
            
            self.ax_protocol.pie(values, labels=protocols, colors=colors[:len(protocols)])
            self.ax_protocol.set_title('‚ö° –¢–£–†–ë–û: –ü—Ä–æ—Ç–æ–∫–æ–ª—ã', color='white', fontweight='bold')
            
            self.canvas_protocol.draw()

    def update_connections_table(self, stats):
        """‚ö° –¢–£–†–ë–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if not hasattr(self, 'connections_tree'):
            return
        
        current_count = len(self.connections_tree.get_children())
        # –í —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        max_records = 25
        new_count = min(len(stats['connections']), max_records)
        
        if abs(current_count - new_count) > 5:
            for item in self.connections_tree.get_children():
                self.connections_tree.delete(item)
            
            for conn in stats['connections'][:max_records]:
                try:
                    local_addr = f"{conn.laddr.ip}:{conn.laddr.port}" if conn.laddr else "N/A"
                    remote_addr = f"{conn.raddr.ip}:{conn.raddr.port}" if conn.raddr else "N/A"
                    status = conn.status
                    pid = conn.pid if conn.pid else "N/A"
                    process_name = stats['process_stats'].get(conn.pid, "Unknown") if conn.pid else "N/A"
                    
                    self.connections_tree.insert('', 'end', values=(local_addr, remote_addr, status, pid, process_name))
                except:
                    continue

    def update_apps_table(self, active_apps):
        """‚ö° –¢–£–†–ë–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        selected_items = self.apps_tree.selection()
        selected_values = []
        for item in selected_items:
            try:
                values = self.apps_tree.item(item, 'values')
                if values:
                    selected_values.append(values[0])
            except:
                pass
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.apps_tree.get_children():
            self.apps_tree.delete(item)
        
        all_apps = {}
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        for app_name, data in active_apps.items():
            all_apps[app_name] = {
                'pid': data['pid'],
                'sent': data.get('sent', 0),
                'received': data.get('received', 0),
                'connections': data['connections'],
                'last_activity': data['last_activity'],
                'total_sent_mb': data.get('total_sent_mb', 0),
                'total_received_mb': data.get('total_received_mb', 0),
                'total_mb': data.get('total_mb', 0)
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        for app_name, traffic_data in self.app_traffic.items():
            if app_name not in all_apps:
                total_data = self.app_total_traffic.get(app_name, {})
                all_apps[app_name] = {
                    'pid': traffic_data.get('pid', 'N/A'),
                    'sent': traffic_data['sent'],
                    'received': traffic_data['received'],
                    'connections': traffic_data['connections'],
                    'last_activity': traffic_data['last_activity'],
                    'total_sent_mb': total_data.get('sent_mb', 0),
                    'total_received_mb': total_data.get('received_mb', 0),
                    'total_mb': total_data.get('total_mb', 0)
                }
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–µ–º—É –æ–±—ä–µ–º—É —Ç—Ä–∞—Ñ–∏–∫–∞ (–±–æ–ª—å—à–µ —Ç—Ä–∞—Ñ–∏–∫–∞ = –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ)
        sorted_apps = sorted(all_apps.items(), 
                           key=lambda x: x[1]['total_mb'] + x[1]['connections'], 
                           reverse=True)
        
        # ‚ö° –í —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        max_apps = 15
        
        for app_name, data in sorted_apps[:max_apps]:
            try:
                pid = data['pid']
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
                sent_mb = f"{data['total_sent_mb']:.2f}"
                recv_mb = f"{data['total_received_mb']:.2f}"
                total_mb = f"{data['total_mb']:.2f}"
                connections = data['connections']
                last_activity = data['last_activity'].strftime('%H:%M:%S') if data['last_activity'] else "N/A"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                is_blocked = self.firewall_manager.is_app_blocked(app_name)
                
                if is_blocked:
                    tag = 'blocked_app'
                    display_name = f"üö´ {app_name}"
                else:
                    display_name = f"‚ö° {app_name}"
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –æ–±—â–µ–º—É —Ç—Ä–∞—Ñ–∏–∫—É
                    if data['total_mb'] > 10 or connections > 5:
                        tag = 'high_activity'
                    elif data['total_mb'] > 1 or connections > 2:
                        tag = 'medium_activity'
                    elif connections > 0 or data['total_mb'] > 0:
                        tag = 'low_activity'
                    else:
                        tag = 'no_activity'
                
                item = self.apps_tree.insert('', 'end', 
                                    values=(display_name, pid, sent_mb, recv_mb, total_mb, connections, last_activity),
                                    tags=(tag,))
                
                if app_name in selected_values:
                    self.apps_tree.selection_add(item)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è {app_name}: {e}")
                continue
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–±–æ —Ä–µ–∂–∏–º–∞
        self.apps_tree.tag_configure('high_activity', background='#ff4757', foreground='white')
        self.apps_tree.tag_configure('medium_activity', background='#ffa502', foreground='white') 
        self.apps_tree.tag_configure('low_activity', background='#2ed573', foreground='white')
        self.apps_tree.tag_configure('no_activity', background='#747d8c', foreground='white')
        self.apps_tree.tag_configure('blocked_app', background='#8b0000', foreground='white')

    # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ==========

    def show_apps_tree_tooltip(self, event, text):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        self.hide_apps_tree_tooltip()
        
        x = self.apps_tree.winfo_rootx() + event.x + 15
        y = self.apps_tree.winfo_rooty() + event.y + 15
        
        self.apps_tree_tooltip = tk.Toplevel(self.root)
        self.apps_tree_tooltip.wm_overrideredirect(True)
        self.apps_tree_tooltip.wm_geometry(f"+{x}+{y}")
        
        frame = tk.Frame(self.apps_tree_tooltip, bg='#1a1a1a', relief='solid', bd=2)
        frame.pack()
        
        label = tk.Label(frame, text=text, bg='#1a1a1a', fg='#ffffff',
                        font=('Consolas', 9), justify='left', padx=12, pady=8)
        label.pack()

    def hide_apps_tree_tooltip(self):
        """–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        if self.apps_tree_tooltip is not None:
            self.apps_tree_tooltip.destroy()
            self.apps_tree_tooltip = None

    def on_apps_tree_leave(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –º—ã—à–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        self.hide_apps_tree_tooltip()

    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        try:
            self.hide_apps_tree_tooltip()
            
            item = self.apps_tree.identify_row(event.y)
            
            if item:
                self.apps_tree.selection_set(item)
                self.apps_tree.focus(item)
                self.context_menu.post(event.x_root, event.y_root)
            else:
                self.apps_tree.selection_remove(self.apps_tree.selection())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    def show_firewall_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã firewall"""
        try:
            if not hasattr(self, 'firewall_tree') or not hasattr(self, 'firewall_context_menu'):
                return
                
            item = self.firewall_tree.identify_row(event.y)
            
            if item:
                values = self.firewall_tree.item(item, 'values')
                if values and values[0] != "‚ö° –¢–£–†–ë–û: –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π":
                    self.firewall_tree.selection_set(item)
                    self.firewall_tree.focus(item)
                    self.firewall_context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é firewall: {e}")

    def on_app_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"""
        if not hasattr(self, 'apps_tree'):
            return
            
        item = self.apps_tree.identify_row(event.y)
        if item:
            self.apps_tree.selection_set(item)
            self.apps_tree.focus(item)
            self.show_app_details()

    def on_firewall_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ firewall"""
        if not hasattr(self, 'firewall_tree'):
            return
            
        item = self.firewall_tree.identify_row(event.y)
        if item:
            values = self.firewall_tree.item(item, 'values')
            if values and values[0] != "‚ö° –¢–£–†–ë–û: –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π":
                app_name = values[0]
                
                result = messagebox.askyesno("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", 
                                           f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name}?")
                if result:
                    try:
                        success, message = self.firewall_manager.remove_block_rule(app_name)
                        if success:
                            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!")
                            self.refresh_firewall_table()
                            self.refresh_apps()
                        else:
                            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:\n{message}")
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {str(e)}")

    # ========== –î–ï–ô–°–¢–í–ò–Ø –° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø–ú–ò ==========

    def get_selected_app_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        try:
            if not hasattr(self, 'apps_tree'):
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤")
                return None
                
            selection = self.apps_tree.selection()
            if not selection:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                return None
                
            item = selection[0]
            values = self.apps_tree.item(item, 'values')
            
            if not values or len(values) < 7:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
                return None
            
            app_name = values[0]
            
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
            for prefix in ["üö´ ", "‚ö° "]:
                if app_name.startswith(prefix):
                    app_name = app_name[len(prefix):]
                    break
                
            return {
                'name': app_name,
                'pid': values[1],
                'sent': values[2],      # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ MB
                'received': values[3],  # –ü–æ–ª—É—á–µ–Ω–æ MB
                'total': values[4],     # –í—Å–µ–≥–æ MB
                'connections': values[5],
                'last_activity': values[6]
            }
        except (IndexError, ValueError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {e}")
            return None

    def get_selected_firewall_app(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã firewall"""
        try:
            if not hasattr(self, 'firewall_tree'):
                return None
                
            selection = self.firewall_tree.selection()
            if not selection:
                return None
                
            item = selection[0]
            values = self.firewall_tree.item(item, 'values')
            
            if not values or len(values) < 1:
                return None
            
            app_name = values[0]
            if app_name == "‚ö° –¢–£–†–ë–û: –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π":
                return None
                
            return {
                'name': app_name,
                'status': values[1] if len(values) > 1 else "",
                'created_time': values[2] if len(values) > 2 else "",
                'actions': values[3] if len(values) > 3 else ""
            }
        except (IndexError, ValueError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {e}")
            return None

    def show_app_details(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        app_info = self.get_selected_app_info()
        if not app_info:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_path = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        try:
            if app_info['pid'] != 'N/A':
                pid = int(app_info['pid'])
                app_path = self.firewall_manager.get_app_path(pid)
                if not app_path:
                    app_path = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except (ValueError, TypeError, Exception):
            app_path = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        is_blocked = self.firewall_manager.is_app_blocked(app_info['name'])
        block_status = "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" if is_blocked else "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        total_data = self.app_total_traffic.get(app_info['name'], {})
        total_sent_mb = total_data.get('sent_mb', 0)
        total_received_mb = total_data.get('received_mb', 0)
        total_mb = total_data.get('total_mb', 0)
        session_start = total_data.get('session_start', datetime.now())
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        session_duration = datetime.now() - session_start
        hours = int(session_duration.total_seconds() // 3600)
        minutes = int((session_duration.total_seconds() % 3600) // 60)
        duration_str = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
            
        detail_text = f"‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú: –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
        detail_text += f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_info['name']}\n"
        detail_text += f"PID: {app_info['pid']}\n"
        detail_text += f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {app_path}\n"
        detail_text += f"–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {block_status}\n"
        detail_text += f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {duration_str}\n\n"
        detail_text += f"üì° –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ —Å–µ—Å—Å–∏—é:\n"
        detail_text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent_mb:.2f} MB\n"
        detail_text += f"–ü–æ–ª—É—á–µ–Ω–æ: {total_received_mb:.2f} MB\n"
        detail_text += f"–í—Å–µ–≥–æ: {total_mb:.2f} MB\n\n"
        detail_text += f"üìä –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
        detail_text += f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {app_info['connections']}\n"
        detail_text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {app_info['last_activity']}"
        
        messagebox.showinfo("‚ö° –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", detail_text)

    def show_app_connections(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        app_info = self.get_selected_app_info()
        if app_info:
            conn_text = f"‚ö° –¢–£–†–ë–û: –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {app_info['name']}: {app_info['connections']}"
            messagebox.showinfo("–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è", conn_text)

    def terminate_process(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"""
        app_info = self.get_selected_app_info()
        if not app_info:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PID
        if app_info['pid'] == 'N/A':
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        try:
            pid = int(app_info['pid'])
        except (ValueError, TypeError):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID –ø—Ä–æ—Ü–µ—Å—Å–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        try:
            proc = psutil.Process(pid)
            proc_name = proc.name()
            proc_status = proc.status()
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            critical_processes = ['explorer.exe', 'winlogon.exe', 'csrss.exe', 'dwm.exe', 
                                'lsass.exe', 'services.exe', 'smss.exe', 'wininit.exe']
            
            if proc_name.lower() in [p.lower() for p in critical_processes]:
                result = messagebox.askyesno("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–¶–ï–°–°", 
                                           f"‚ö†Ô∏è {proc_name} - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å!\n\n"
                                           f"–ï–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.\n\n"
                                           f"–í—ã –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å?",
                                           icon='warning')
                if not result:
                    return
            else:
                result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", 
                                           f"‚ö° –¢–£–†–ë–û: –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å?\n\n"
                                           f"–ü—Ä–æ—Ü–µ—Å—Å: {proc_name}\n"
                                           f"PID: {pid}\n"
                                           f"–°—Ç–∞—Ç—É—Å: {proc_status}\n\n"
                                           f"–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!")
                if not result:
                    return
                    
        except psutil.NoSuchProcess:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        except psutil.AccessDenied:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")
            return
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_window = self.show_progress_window(f"‚ö° –¢–£–†–ë–û –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc_name}...")
        
        success = False
        method_used = ""
        
        try:
            # –ú–ï–¢–û–î 1: –ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ psutil
            print(f"‚ö° –ú–ï–¢–û–î 1: –ú—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc_name} (PID: {pid})")
            try:
                proc.terminate()
                proc.wait(timeout=2)
                if not proc.is_running():
                    success = True
                    method_used = "–º—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (terminate)"
                    print(f"‚úÖ –£—Å–ø–µ—Ö –º–µ—Ç–æ–¥–æ–º 1")
            except psutil.TimeoutExpired:
                print(f"‚è∞ –ú–µ—Ç–æ–¥ 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∑–∞ 2 —Å–µ–∫")
            except Exception as e:
                print(f"‚ùå –ú–µ—Ç–æ–¥ 1 –æ—à–∏–±–∫–∞: {e}")
            
            # –ú–ï–¢–û–î 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ psutil
            if not success:
                print(f"‚ö° –ú–ï–¢–û–î 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                try:
                    proc.kill()
                    proc.wait(timeout=2)
                    if not proc.is_running():
                        success = True
                        method_used = "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (kill)"
                        print(f"‚úÖ –£—Å–ø–µ—Ö –º–µ—Ç–æ–¥–æ–º 2")
                except psutil.TimeoutExpired:
                    print(f"‚è∞ –ú–µ—Ç–æ–¥ 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∑–∞ 2 —Å–µ–∫")
                except Exception as e:
                    print(f"‚ùå –ú–µ—Ç–æ–¥ 2 –æ—à–∏–±–∫–∞: {e}")
            
            # –ú–ï–¢–û–î 3: –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ taskkill /F
            if not success:
                print(f"‚ö° –ú–ï–¢–û–î 3: –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ taskkill /F")
                try:
                    result = subprocess.run(['taskkill', '/F', '/PID', str(pid)], 
                                          capture_output=True, text=True, timeout=5)
                    
                    if result.returncode == 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
                        time.sleep(0.5)
                        try:
                            test_proc = psutil.Process(pid)
                            if not test_proc.is_running():
                                success = True
                                method_used = "—Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ taskkill"
                                print(f"‚úÖ –£—Å–ø–µ—Ö –º–µ—Ç–æ–¥–æ–º 3")
                        except psutil.NoSuchProcess:
                            success = True
                            method_used = "—Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ taskkill"
                            print(f"‚úÖ –£—Å–ø–µ—Ö –º–µ—Ç–æ–¥–æ–º 3 (–ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                    else:
                        print(f"‚ùå –ú–µ—Ç–æ–¥ 3 –æ—à–∏–±–∫–∞: {result.stderr}")
                        
                except subprocess.TimeoutExpired:
                    print(f"‚è∞ –ú–µ—Ç–æ–¥ 3 –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                except Exception as e:
                    print(f"‚ùå –ú–µ—Ç–æ–¥ 3 –æ—à–∏–±–∫–∞: {e}")
            
            # –ú–ï–¢–û–î 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if not success:
                print(f"‚ö° –ú–ï–¢–û–î 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞")
                try:
                    result = subprocess.run(['taskkill', '/F', '/IM', proc_name], 
                                          capture_output=True, text=True, timeout=5)
                    
                    if result.returncode == 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                        time.sleep(0.5)
                        try:
                            test_proc = psutil.Process(pid)
                            if not test_proc.is_running():
                                success = True
                                method_used = f"–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ ({proc_name})"
                                print(f"‚úÖ –£—Å–ø–µ—Ö –º–µ—Ç–æ–¥–æ–º 4")
                        except psutil.NoSuchProcess:
                            success = True
                            method_used = f"–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ ({proc_name})"
                            print(f"‚úÖ –£—Å–ø–µ—Ö –º–µ—Ç–æ–¥–æ–º 4 (–ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                    else:
                        print(f"‚ùå –ú–µ—Ç–æ–¥ 4 –æ—à–∏–±–∫–∞: {result.stderr}")
                        
                except subprocess.TimeoutExpired:
                    print(f"‚è∞ –ú–µ—Ç–æ–¥ 4 –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                except Exception as e:
                    print(f"‚ùå –ú–µ—Ç–æ–¥ 4 –æ—à–∏–±–∫–∞: {e}")
            
            # –ú–ï–¢–û–î 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            if not success:
                print(f"‚ö° –ú–ï–¢–û–î 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
                try:
                    children = proc.children(recursive=True)
                    for child in children:
                        try:
                            child.kill()
                            print(f"üî™ –ó–∞–≤–µ—Ä—à–µ–Ω –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å: {child.pid}")
                        except:
                            pass
                    
                    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π
                    proc.kill()
                    proc.wait(timeout=2)
                    
                    if not proc.is_running():
                        success = True
                        method_used = "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"
                        print(f"‚úÖ –£—Å–ø–µ—Ö –º–µ—Ç–æ–¥–æ–º 5")
                        
                except Exception as e:
                    print(f"‚ùå –ú–µ—Ç–æ–¥ 5 –æ—à–∏–±–∫–∞: {e}")
            
            progress_window.destroy()
            
            if success:
                messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", 
                                   f"‚ö° –¢–£–†–ë–û: –ü—Ä–æ—Ü–µ—Å—Å {proc_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                                   f"–ú–µ—Ç–æ–¥: {method_used}\n"
                                   f"PID: {pid}")
                self.refresh_apps()
            else:
                messagebox.showerror("‚ùå –ù–µ—É–¥–∞—á–∞", 
                                   f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {proc_name}\n\n"
                                   f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                                   f"‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞—â–∏—â–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π/–∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º\n"
                                   f"‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å\n"
                                   f"‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏\n"
                                   f"‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º\n\n"
                                   f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                                   f"‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                                   f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á\n"
                                   f"‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä")
                
        except psutil.NoSuchProcess:
            progress_window.destroy()
            messagebox.showinfo("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–ü—Ä–æ—Ü–µ—Å—Å {proc_name} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            self.refresh_apps()
            
        except Exception as e:
            progress_window.destroy()
            error_msg = str(e)
            messagebox.showerror("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                               f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:\n\n"
                               f"{error_msg}\n\n"
                               f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    def copy_app_info(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        app_info = self.get_selected_app_info()
        if not app_info:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_path = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        try:
            if app_info['pid'] != 'N/A':
                pid = int(app_info['pid'])
                app_path = self.firewall_manager.get_app_path(pid)
                if not app_path:
                    app_path = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except (ValueError, TypeError, Exception):
            app_path = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        total_data = self.app_total_traffic.get(app_info['name'], {})
        total_sent_mb = total_data.get('sent_mb', 0)
        total_received_mb = total_data.get('received_mb', 0)
        total_mb = total_data.get('total_mb', 0)
        session_start = total_data.get('session_start', datetime.now())
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        session_duration = datetime.now() - session_start
        hours = int(session_duration.total_seconds() // 3600)
        minutes = int((session_duration.total_seconds() % 3600) // 60)
        duration_str = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        is_blocked = self.firewall_manager.is_app_blocked(app_info['name'])
        block_status = "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" if is_blocked else "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω"
            
        info_text = f"""‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_info['name']}
PID: {app_info['pid']}
–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {app_path}
–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {block_status}
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {duration_str}

üì° –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ –∑–∞ —Å–µ—Å—Å–∏—é:
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent_mb:.2f} MB
–ü–æ–ª—É—á–µ–Ω–æ: {total_received_mb:.2f} MB
–í—Å–µ–≥–æ: {total_mb:.2f} MB

üìä –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {app_info['connections']}
–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {app_info['last_activity']}"""
        
        try:
            self.root.clipboard_clear()
            self.root.clipboard_append(info_text)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚ö° –¢–£–†–ë–û: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: {e}")

    # ========== –ú–ï–¢–û–î–´ FIREWALL ==========

    def block_app_internet(self):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"""
        app_info = self.get_selected_app_info()
        if not app_info:
            return
        
        app_name = app_info['name']
        
        if not self.admin_rights:
            messagebox.showerror("–û—à–∏–±–∫–∞", 
                               "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n"
                               "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not self.firewall_available:
            messagebox.showerror("–û—à–∏–±–∫–∞", 
                               "Windows Firewall –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                               "–í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω—Ç–∏–≤–∏—Ä—É—Å.")
            return
        
        if self.firewall_manager.is_app_blocked(app_name):
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        try:
            pid = int(app_info['pid']) if app_info['pid'] != 'N/A' else None
            if not pid:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            app_path = self.firewall_manager.get_app_path(pid)
            if not app_path:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
                return
            
            result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", 
                                       f"‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú\n\n"
                                       f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è:\n\n"
                                       f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_name}\n"
                                       f"PID: {pid}\n"
                                       f"–ü—É—Ç—å: {app_path}\n\n"
                                       f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª–æ Windows Firewall.",
                                       icon='warning')
            
            if result:
                progress_window = self.show_progress_window("‚ö° –¢–£–†–ë–û —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ firewall...")
                
                try:
                    success, message = self.firewall_manager.create_block_rule(app_name, app_path)
                    
                    progress_window.destroy()
                    
                    if success:
                        messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚ö° –¢–£–†–ë–û: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!\n{message}")
                        self.firewall_manager.refresh_blocked_status()
                        if hasattr(self, 'firewall_tree'):
                            self.refresh_firewall_table()
                        if hasattr(self, 'apps_tree'):
                            self.refresh_apps()
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{message}")
                        
                except Exception as e:
                    progress_window.destroy()
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")
                    
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    
    def unblock_app_internet(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"""
        app_info = self.get_selected_app_info()
        if not app_info:
            return
        
        self.unblock_app_internet_by_name(app_info['name'])

    def unblock_app_internet_by_name(self, app_name):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ –∏–º–µ–Ω–∏"""
        if not self.admin_rights:
            messagebox.showerror("–û—à–∏–±–∫–∞", 
                               "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
            return
        
        if not self.firewall_manager.is_app_blocked(app_name):
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", 
                                   f"‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú\n\n"
                                   f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è:\n\n"
                                   f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_name}\n\n"
                                   f"–ü—Ä–∞–≤–∏–ª–æ firewall –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ.")
        
        if result:
            progress_window = self.show_progress_window("‚ö° –¢–£–†–ë–û —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ firewall...")
            
            try:
                success, message = self.firewall_manager.remove_block_rule(app_name)
                
                progress_window.destroy()
                
                if success:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚ö° –¢–£–†–ë–û: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!\n{message}")
                    self.refresh_firewall_table()
                    self.refresh_apps()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{message}")
                    
            except Exception as e:
                progress_window.destroy()
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {str(e)}")

    def unblock_selected_firewall_app(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã firewall"""
        app_info = self.get_selected_firewall_app()
        if app_info:
            self.unblock_app_internet_by_name(app_info['name'])
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            
    def copy_firewall_app_name(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        app_info = self.get_selected_firewall_app()
        if app_info:
            try:
                self.root.clipboard_clear()
                self.root.clipboard_append(app_info['name'])
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '{app_info['name']}' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: {e}")
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

    def show_progress_window(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        progress_window = tk.Toplevel(self.root)
        progress_window.title("‚ö° –¢–£–†–ë–û –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
        progress_window.geometry("350x120")
        progress_window.configure(bg='#2b2b2b')
        progress_window.transient(self.root)
        progress_window.grab_set()
        
        progress_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))
        
        label = tk.Label(progress_window, text=message, bg='#2b2b2b', fg='white', 
                        font=('Arial', 10))
        label.pack(expand=True)
        
        progress_bar = ttk.Progressbar(progress_window, mode='indeterminate')
        progress_bar.pack(fill='x', padx=20, pady=10)
        progress_bar.start()
        
        progress_window.update()
        return progress_window

    def refresh_firewall_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        if not hasattr(self, 'firewall_tree'):
            print("firewall_tree –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return
            
        for item in self.firewall_tree.get_children():
            self.firewall_tree.delete(item)
        
        try:
            blocked_apps = self.firewall_manager.refresh_blocked_status()
            
            for app_name in blocked_apps:
                status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ"
                created_time = "‚ö° –¢–£–†–ë–û"
                actions = "–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
                
                self.firewall_tree.insert('', 'end', 
                                        values=(app_name, status, created_time, actions),
                                        tags=('blocked',))
            
            self.firewall_tree.tag_configure('blocked', background='#ff4757', foreground='white')
            
            if not blocked_apps:
                self.firewall_tree.insert('', 'end', 
                                        values=("‚ö° –¢–£–†–ë–û: –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", "", "", ""),
                                        tags=('empty',))
                self.firewall_tree.tag_configure('empty', background='#747d8c', foreground='white')
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã firewall: {e}")
            self.firewall_tree.insert('', 'end', 
                                    values=(f"‚ö° –¢–£–†–ë–û –û—à–∏–±–∫–∞: {str(e)}", "", "", ""),
                                    tags=('error',))
            self.firewall_tree.tag_configure('error', background='#e74c3c', foreground='white')

    def cleanup_firewall_rules(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ firewall —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º"""
        if not self.admin_rights:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        blocked_apps = self.firewall_manager.get_blocked_apps()
        if not blocked_apps:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                   f"‚ö° –¢–£–†–ë–û –†–ï–ñ–ò–ú\n\n"
                                   f"–£–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏?\n\n"
                                   f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {len(blocked_apps)}\n"
                                   f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                                   icon='warning')
        
        if result:
            progress_window = self.show_progress_window("‚ö° –¢–£–†–ë–û —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª...")
            
            try:
                success, message = self.firewall_manager.cleanup_rules()
                progress_window.destroy()
                
                if success:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚ö° –¢–£–†–ë–û: –ü—Ä–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω—ã!\n{message}")
                    if hasattr(self, 'firewall_tree'):
                        self.refresh_firewall_table()
                    if hasattr(self, 'apps_tree'):
                        self.refresh_apps()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:\n{message}")
                    
            except Exception as e:
                progress_window.destroy()
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {str(e)}")

    def test_firewall_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å firewall"""
        try:
            if not self.admin_rights:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            self.firewall_status_label.config(text="‚ö° –¢–£–†–ë–û —Ç–µ—Å—Ç firewall...")
            self.root.update()
            
            success = self.firewall_manager.manual_test_rule_creation()
            
            if success:
                self.firewall_status_label.config(text="‚úÖ ‚ö° –¢–£–†–ë–û —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! Firewall —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                
                messagebox.showinfo("–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω", 
                                   "‚úÖ ‚ö° –¢–£–†–ë–û: Windows Firewall —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n"
                                   "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.\n"
                                   "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å.")
            else:
                self.firewall_status_label.config(text="‚ùå ‚ö° –¢–£–†–ë–û —Ç–µ—Å—Ç –ù–ï –ø—Ä–æ–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.")
                messagebox.showerror("–¢–µ—Å—Ç –ù–ï –ø—Ä–æ–π–¥–µ–Ω", 
                                   "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å Windows Firewall!\n\n"
                                   "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
            
            self.refresh_firewall_table()
            
        except Exception as e:
            self.firewall_status_label.config(text=f"‚ùå ‚ö° –¢–£–†–ë–û –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    def run_firewall_diagnostics(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É firewall"""
        try:
            self.firewall_status_label.config(text="‚ö° –¢–£–†–ë–û –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...")
            self.root.update()
            
            # –û—á–∏—â–∞–µ–º –ª–æ–≥
            self.console_log = []
            
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ print –≤ –ª–æ–≥
            original_stdout = sys.stdout
            
            class LogCapture:
                def __init__(self, log_list):
                    self.log_list = log_list
                    
                def write(self, text):
                    if text.strip():
                        self.log_list.append(text.strip())
                    original_stdout.write(text)
                    
                def flush(self):
                    original_stdout.flush()
            
            sys.stdout = LogCapture(self.console_log)
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                self.firewall_manager.test_firewall_access()
                blocked_apps = self.firewall_manager.get_blocked_apps()
                
                self.firewall_status_label.config(text=f"‚ö° –¢–£–†–ë–û –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ: {len(blocked_apps)}")
                
                messagebox.showinfo("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                                   f"‚ö° –¢–£–†–ë–û –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                                   f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(blocked_apps)}\n"
                                   f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.")
                
            finally:
                sys.stdout = original_stdout
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.refresh_firewall_table()
            
        except Exception as e:
            self.firewall_status_label.config(text=f"‚ùå ‚ö° –¢–£–†–ë–û –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

    # ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú ==========

    def start_monitoring(self):
        """‚ö° –¢–£–†–ë–û –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.monitoring:
            self.monitoring = True
            self.start_btn.config(state='disabled')
            self.stop_btn.config(state='normal')
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.traffic_data.clear()
            self.protocol_stats.clear()
            self.bandwidth_data['sent'].clear()
            self.bandwidth_data['received'].clear()
            self.time_stamps.clear()
            self.last_stats = None
            
            self.app_traffic.clear()
            self.app_history.clear()
            self.previous_io_stats.clear()
            self.last_sort_order.clear()
            self.apps_update_counter = 0
            
            # ‚ö° –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
            self.app_total_traffic.clear()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—â–µ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
            if hasattr(self, 'last_net_io'):
                delattr(self, 'last_net_io')
            
            self.firewall_available = self.firewall_manager.check_firewall_access()
            
            print("‚ö° –¢–£–†–ë–û –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
            print("üìä –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω—ã")
            
            self.monitor_thread = threading.Thread(target=self.update_data, daemon=True)
            self.monitor_thread.start()

    def reset_traffic_stats(self):
        """‚ö° –¢–£–†–ë–û —Å–±—Ä–æ—Å –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        try:
            result = messagebox.askyesno("‚ö° –¢–£–†–ë–û –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 
                                       "–°–±—Ä–æ—Å–∏—Ç—å –í–°–Æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞?\n\n"
                                       "üìä –°—á–µ—Ç—á–∏–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã\n"
                                       "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å–±—Ä–æ—Å–∏—Ç—Å—è\n"
                                       "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ\n\n"
                                       "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                                       icon='warning')
            
            if result:
                # –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
                self.app_total_traffic.clear()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.app_traffic.clear()
                self.app_history.clear()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.refresh_apps()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", 
                                   "‚ö° –¢–£–†–ë–û: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!\n\n"
                                   "üìä –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã\n"
                                   "üîÑ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª–æ—Å—å –∑–∞–Ω–æ–≤–æ")
                
                print("‚ö° –¢–£–†–ë–û: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    def stop_monitoring(self):
        """‚ö° –¢–£–†–ë–û –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring = False
        self.start_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        
        print("‚ö° –¢–£–†–ë–û –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    def refresh_apps(self):
        """‚ö° –¢–£–†–ë–û –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        if not hasattr(self, 'apps_tree'):
            print("apps_tree –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return
            
        active_apps = self.get_process_network_activity()
        self.update_apps_table(active_apps)
        
        current_time = datetime.now().strftime('%H:%M:%S')
        print(f"‚ö° –¢–£–†–ë–û —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {current_time}")

    def save_report(self):
        """‚ö° –¢–£–†–ë–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_sent_mb = sum(data.get('sent_mb', 0) for data in self.app_total_traffic.values())
            total_received_mb = sum(data.get('received_mb', 0) for data in self.app_total_traffic.values())
            total_mb = total_sent_mb + total_received_mb
            total_apps = len(self.app_total_traffic)
            
            report_data = {
                'timestamp': datetime.now().isoformat(),
                'mode': "‚ö° TURBO MODE",
                'summary': {
                    'total_sent_mb': round(total_sent_mb, 2),
                    'total_received_mb': round(total_received_mb, 2),
                    'total_traffic_mb': round(total_mb, 2),
                    'total_apps_monitored': total_apps
                },
                'bandwidth_data': {
                    'sent': list(self.bandwidth_data['sent']),
                    'received': list(self.bandwidth_data['received'])
                },
                'protocol_stats': dict(self.protocol_stats),
                'time_stamps': list(self.time_stamps),
                'app_traffic': {app: {
                    'sent': data['sent'],
                    'received': data['received'],
                    'connections': data['connections'],
                    'last_activity': data['last_activity'].isoformat() if data['last_activity'] else None
                } for app, data in self.app_traffic.items()},
                # ‚ö° –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
                'app_total_traffic_mb': {app: {
                    'sent_mb': round(data['sent_mb'], 2),
                    'received_mb': round(data['received_mb'], 2),
                    'total_mb': round(data['total_mb'], 2),
                    'session_start': data['session_start'].isoformat() if data['session_start'] else None
                } for app, data in self.app_total_traffic.items()},
                'firewall_blocked_apps': self.firewall_manager.get_blocked_apps() if hasattr(self, 'firewall_manager') else []
            }
            
            filename = f"network_report_turbo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", 
                              f"‚ö° –¢–£–†–ë–û –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}\n\n"
                              f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                              f"‚Üë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent_mb:.2f} MB\n"
                              f"‚Üì –ü–æ–ª—É—á–µ–Ω–æ: {total_received_mb:.2f} MB\n"
                              f"üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {total_apps}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")


def main():
    """‚ö° –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¢–£–†–ë–û –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("=" * 60)
    print("‚ö° –ó–ê–ü–£–°–ö –¢–£–†–ë–û-–ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –°–ï–¢–ï–í–û–ì–û –¢–†–ê–§–ò–ö–ê ‚ö°")
    print("=" * 60)
    print("üöÄ –¢–û–õ–¨–ö–û –¢–£–†–ë–û –†–ï–ñ–ò–ú!")
    print("üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —ç–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")
    print("‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã")
    print("üì± –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–∫–ª–∞–¥–∫–∞ '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è'")
    print("‚ñ∂Ô∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫")
    print("üö´ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –û–¢–ö–õ–Æ–ß–ï–ù–û")
    print("=" * 60)
    
    root = tk.Tk()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        root.iconname("‚ö° –¢—É—Ä–±–æ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
    except:
        pass
    
    app = NetworkTrafficAnalyzer(root)
    
    print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("‚ö° –¢–û–õ–¨–ö–û –¢–£–†–ë–û –†–ï–ñ–ò–ú - –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–æ—Å—Ç—å—é!")
    print("üì± –í–∫–ª–∞–¥–∫–∞ '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è' –æ—Ç–∫—Ä—ã—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
    print("üéâ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    root.mainloop()
    
    print("üëã –¢–£–†–ë–û-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    main()